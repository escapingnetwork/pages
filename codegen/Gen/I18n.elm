module Gen.I18n exposing (aboutProduct, aboutProductContent, aboutTitle, aboutWhere, aboutWhereContent, aboutWho, aboutWhoContent, annotation_, arrivedLanguage, buttonRequestAccommodation, buttonServices, call_, caseOf_, currentLanguage, decodeHome, footerContact, footerCopyright, footerLanguage, footerLegal, footerMeeting, footerPrivacyPolicy, footerSupport, footerTermsConditions, formsAge, formsContact, formsCountry, formsEmail, formsError, formsErrorContact, formsForename, formsFrom, formsInstitution, formsMessage, formsPhone, formsService, formsSex, formsSubmit, formsSubmitting, formsSurname, formsTo, homeHeadline, homeSubline, init, languageFromString, languageToFileName_home, languageToString, languages, loadHome, make_, moduleName_, navbarAbout, navbarHost, navbarPartner, navbarServices, servicesHalfBoard, servicesHostels, servicesSelfCatering, servicesTitle, switchLanguage, values_)

{-| 
@docs moduleName_, languageToFileName_home, decodeHome, servicesTitle, servicesSelfCatering, servicesHostels, servicesHalfBoard, navbarServices, navbarPartner, navbarHost, navbarAbout, homeSubline, homeHeadline, formsTo, formsSurname, formsSubmitting, formsSubmit, formsSex, formsService, formsPhone, formsMessage, formsInstitution, formsFrom, formsForename, formsErrorContact, formsError, formsEmail, formsCountry, formsContact, formsAge, footerTermsConditions, footerSupport, footerPrivacyPolicy, footerMeeting, footerLegal, footerLanguage, footerCopyright, footerContact, buttonServices, buttonRequestAccommodation, aboutWhoContent, aboutWho, aboutWhereContent, aboutWhere, aboutTitle, aboutProductContent, aboutProduct, switchLanguage, loadHome, languageFromString, languageToString, languages, arrivedLanguage, currentLanguage, init, annotation_, make_, caseOf_, call_, values_
-}


import Elm
import Elm.Annotation as Type
import Elm.Case


{-| The name of this module. -}
moduleName_ : List String
moduleName_ =
    [ "I18n" ]


{-| languageToFileName_home: I18n.Language -> String -}
languageToFileName_home : Elm.Expression -> Elm.Expression
languageToFileName_home languageToFileName_homeArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "languageToFileName_home"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "Language" [] ]
                        Type.string
                    )
            }
        )
        [ languageToFileName_homeArg ]


{-| {-| Decode an `I18n` from Json. Make sure this is _only_ used on the files generated by this package.
You need to pass the language of the loaded translations (for bookkeeping).
-}

decodeHome: I18n.Language -> Json.Decode.Decoder (I18n.I18n -> I18n.I18n)
-}
decodeHome : Elm.Expression -> Elm.Expression
decodeHome decodeHomeArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "decodeHome"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "Language" [] ]
                        (Type.namedWith
                            [ "Json", "Decode" ]
                            "Decoder"
                            [ Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                (Type.namedWith [ "I18n" ] "I18n" [])
                            ]
                        )
                    )
            }
        )
        [ decodeHomeArg ]


{-| servicesTitle: I18n.I18n -> String -}
servicesTitle : Elm.Expression -> Elm.Expression
servicesTitle servicesTitleArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "servicesTitle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ servicesTitleArg ]


{-| servicesSelfCatering: I18n.I18n -> String -}
servicesSelfCatering : Elm.Expression -> Elm.Expression
servicesSelfCatering servicesSelfCateringArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "servicesSelfCatering"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ servicesSelfCateringArg ]


{-| servicesHostels: I18n.I18n -> String -}
servicesHostels : Elm.Expression -> Elm.Expression
servicesHostels servicesHostelsArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "servicesHostels"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ servicesHostelsArg ]


{-| servicesHalfBoard: I18n.I18n -> String -}
servicesHalfBoard : Elm.Expression -> Elm.Expression
servicesHalfBoard servicesHalfBoardArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "servicesHalfBoard"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ servicesHalfBoardArg ]


{-| navbarServices: I18n.I18n -> String -}
navbarServices : Elm.Expression -> Elm.Expression
navbarServices navbarServicesArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "navbarServices"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ navbarServicesArg ]


{-| navbarPartner: I18n.I18n -> String -}
navbarPartner : Elm.Expression -> Elm.Expression
navbarPartner navbarPartnerArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "navbarPartner"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ navbarPartnerArg ]


{-| navbarHost: I18n.I18n -> String -}
navbarHost : Elm.Expression -> Elm.Expression
navbarHost navbarHostArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "navbarHost"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ navbarHostArg ]


{-| navbarAbout: I18n.I18n -> String -}
navbarAbout : Elm.Expression -> Elm.Expression
navbarAbout navbarAboutArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "navbarAbout"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ navbarAboutArg ]


{-| homeSubline: I18n.I18n -> String -}
homeSubline : Elm.Expression -> Elm.Expression
homeSubline homeSublineArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "homeSubline"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ homeSublineArg ]


{-| homeHeadline: I18n.I18n -> String -}
homeHeadline : Elm.Expression -> Elm.Expression
homeHeadline homeHeadlineArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "homeHeadline"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ homeHeadlineArg ]


{-| formsTo: I18n.I18n -> String -}
formsTo : Elm.Expression -> Elm.Expression
formsTo formsToArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsTo"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ formsToArg ]


{-| formsSurname: I18n.I18n -> String -}
formsSurname : Elm.Expression -> Elm.Expression
formsSurname formsSurnameArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsSurname"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ formsSurnameArg ]


{-| formsSubmitting: I18n.I18n -> String -}
formsSubmitting : Elm.Expression -> Elm.Expression
formsSubmitting formsSubmittingArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsSubmitting"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ formsSubmittingArg ]


{-| formsSubmit: I18n.I18n -> String -}
formsSubmit : Elm.Expression -> Elm.Expression
formsSubmit formsSubmitArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsSubmit"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ formsSubmitArg ]


{-| formsSex: I18n.I18n -> String -}
formsSex : Elm.Expression -> Elm.Expression
formsSex formsSexArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsSex"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ formsSexArg ]


{-| formsService: I18n.I18n -> String -}
formsService : Elm.Expression -> Elm.Expression
formsService formsServiceArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsService"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ formsServiceArg ]


{-| formsPhone: I18n.I18n -> String -}
formsPhone : Elm.Expression -> Elm.Expression
formsPhone formsPhoneArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsPhone"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ formsPhoneArg ]


{-| formsMessage: I18n.I18n -> String -}
formsMessage : Elm.Expression -> Elm.Expression
formsMessage formsMessageArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsMessage"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ formsMessageArg ]


{-| formsInstitution: I18n.I18n -> String -}
formsInstitution : Elm.Expression -> Elm.Expression
formsInstitution formsInstitutionArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsInstitution"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ formsInstitutionArg ]


{-| formsFrom: I18n.I18n -> String -}
formsFrom : Elm.Expression -> Elm.Expression
formsFrom formsFromArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsFrom"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ formsFromArg ]


{-| formsForename: I18n.I18n -> String -}
formsForename : Elm.Expression -> Elm.Expression
formsForename formsForenameArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsForename"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ formsForenameArg ]


{-| formsErrorContact: I18n.I18n -> String -}
formsErrorContact : Elm.Expression -> Elm.Expression
formsErrorContact formsErrorContactArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsErrorContact"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ formsErrorContactArg ]


{-| formsError: I18n.I18n -> String -}
formsError : Elm.Expression -> Elm.Expression
formsError formsErrorArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsError"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ formsErrorArg ]


{-| formsEmail: I18n.I18n -> String -}
formsEmail : Elm.Expression -> Elm.Expression
formsEmail formsEmailArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsEmail"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ formsEmailArg ]


{-| formsCountry: I18n.I18n -> String -}
formsCountry : Elm.Expression -> Elm.Expression
formsCountry formsCountryArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsCountry"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ formsCountryArg ]


{-| formsContact: I18n.I18n -> String -}
formsContact : Elm.Expression -> Elm.Expression
formsContact formsContactArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsContact"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ formsContactArg ]


{-| formsAge: I18n.I18n -> String -}
formsAge : Elm.Expression -> Elm.Expression
formsAge formsAgeArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsAge"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ formsAgeArg ]


{-| footerTermsConditions: I18n.I18n -> String -}
footerTermsConditions : Elm.Expression -> Elm.Expression
footerTermsConditions footerTermsConditionsArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "footerTermsConditions"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ footerTermsConditionsArg ]


{-| footerSupport: I18n.I18n -> String -}
footerSupport : Elm.Expression -> Elm.Expression
footerSupport footerSupportArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "footerSupport"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ footerSupportArg ]


{-| footerPrivacyPolicy: I18n.I18n -> String -}
footerPrivacyPolicy : Elm.Expression -> Elm.Expression
footerPrivacyPolicy footerPrivacyPolicyArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "footerPrivacyPolicy"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ footerPrivacyPolicyArg ]


{-| footerMeeting: I18n.I18n -> String -}
footerMeeting : Elm.Expression -> Elm.Expression
footerMeeting footerMeetingArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "footerMeeting"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ footerMeetingArg ]


{-| footerLegal: I18n.I18n -> String -}
footerLegal : Elm.Expression -> Elm.Expression
footerLegal footerLegalArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "footerLegal"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ footerLegalArg ]


{-| footerLanguage: I18n.I18n -> String -}
footerLanguage : Elm.Expression -> Elm.Expression
footerLanguage footerLanguageArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "footerLanguage"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ footerLanguageArg ]


{-| footerCopyright: I18n.I18n -> String -}
footerCopyright : Elm.Expression -> Elm.Expression
footerCopyright footerCopyrightArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "footerCopyright"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ footerCopyrightArg ]


{-| footerContact: I18n.I18n -> String -}
footerContact : Elm.Expression -> Elm.Expression
footerContact footerContactArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "footerContact"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ footerContactArg ]


{-| buttonServices: I18n.I18n -> String -}
buttonServices : Elm.Expression -> Elm.Expression
buttonServices buttonServicesArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "buttonServices"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ buttonServicesArg ]


{-| buttonRequestAccommodation: I18n.I18n -> String -}
buttonRequestAccommodation : Elm.Expression -> Elm.Expression
buttonRequestAccommodation buttonRequestAccommodationArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "buttonRequestAccommodation"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ buttonRequestAccommodationArg ]


{-| aboutWhoContent: I18n.I18n -> String -}
aboutWhoContent : Elm.Expression -> Elm.Expression
aboutWhoContent aboutWhoContentArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "aboutWhoContent"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ aboutWhoContentArg ]


{-| aboutWho: I18n.I18n -> String -}
aboutWho : Elm.Expression -> Elm.Expression
aboutWho aboutWhoArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "aboutWho"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ aboutWhoArg ]


{-| aboutWhereContent: I18n.I18n -> String -}
aboutWhereContent : Elm.Expression -> Elm.Expression
aboutWhereContent aboutWhereContentArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "aboutWhereContent"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ aboutWhereContentArg ]


{-| aboutWhere: I18n.I18n -> String -}
aboutWhere : Elm.Expression -> Elm.Expression
aboutWhere aboutWhereArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "aboutWhere"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ aboutWhereArg ]


{-| aboutTitle: I18n.I18n -> String -}
aboutTitle : Elm.Expression -> Elm.Expression
aboutTitle aboutTitleArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "aboutTitle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ aboutTitleArg ]


{-| aboutProductContent: I18n.I18n -> String -}
aboutProductContent : Elm.Expression -> Elm.Expression
aboutProductContent aboutProductContentArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "aboutProductContent"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ aboutProductContentArg ]


{-| aboutProduct: I18n.I18n -> String -}
aboutProduct : Elm.Expression -> Elm.Expression
aboutProduct aboutProductArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "aboutProduct"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
        )
        [ aboutProductArg ]


{-| {-| Switch the current language and reload all previously loaded translation bundles in the new language.
-}

switchLanguage: 
    I18n.Language
    -> (Result.Result Http.Error (I18n.I18n -> I18n.I18n) -> msg)
    -> I18n.I18n
    -> ( I18n.I18n, I18n.Cmd msg )
-}
switchLanguage :
    Elm.Expression
    -> (Elm.Expression -> Elm.Expression)
    -> Elm.Expression
    -> Elm.Expression
switchLanguage switchLanguageArg switchLanguageArg0 switchLanguageArg1 =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "switchLanguage"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "Language" []
                        , Type.function
                            [ Type.namedWith
                                [ "Result" ]
                                "Result"
                                [ Type.namedWith [ "Http" ] "Error" []
                                , Type.function
                                    [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                    (Type.namedWith [ "I18n" ] "I18n" [])
                                ]
                            ]
                            (Type.var "msg")
                        , Type.namedWith [ "I18n" ] "I18n" []
                        ]
                        (Type.tuple
                            (Type.namedWith [ "I18n" ] "I18n" [])
                            (Type.namedWith [ "I18n" ] "Cmd" [ Type.var "msg" ])
                        )
                    )
            }
        )
        [ switchLanguageArg
        , Elm.functionReduced "switchLanguageUnpack" switchLanguageArg0
        , switchLanguageArg1
        ]


{-| {-| Load translations for identifier 'home' and a `Language` from the server. This is a simple `Http.get`, if you need more customization,
you can use the `decoder` instead. Pass the path and a callback to your `update` function, for example

    load { language = En, path = "/i18n", onLoad = GotTranslations }

will make a `GET` request to /i18n/home.en.json and will call GotTranslations with the decoded response.

-}

loadHome: 
    (Result.Result Http.Error (I18n.I18n -> I18n.I18n) -> msg)
    -> I18n.I18n
    -> I18n.Cmd msg
-}
loadHome :
    (Elm.Expression -> Elm.Expression) -> Elm.Expression -> Elm.Expression
loadHome loadHomeArg loadHomeArg0 =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "loadHome"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Result" ]
                                "Result"
                                [ Type.namedWith [ "Http" ] "Error" []
                                , Type.function
                                    [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                    (Type.namedWith [ "I18n" ] "I18n" [])
                                ]
                            ]
                            (Type.var "msg")
                        , Type.namedWith [ "I18n" ] "I18n" []
                        ]
                        (Type.namedWith [ "I18n" ] "Cmd" [ Type.var "msg" ])
                    )
            }
        )
        [ Elm.functionReduced "loadHomeUnpack" loadHomeArg, loadHomeArg0 ]


{-| {-| Maybe parse a `Language` from a `String`.
This will map languages based on the prefix i.e. 'en-US' and 'en' will both map to 'En' unless you provided a 'en-US' translation file.
-}

languageFromString: String -> Maybe I18n.Language
-}
languageFromString : String -> Elm.Expression
languageFromString languageFromStringArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "languageFromString"
            , annotation =
                Just
                    (Type.function
                        [ Type.string ]
                        (Type.maybe (Type.namedWith [ "I18n" ] "Language" []))
                    )
            }
        )
        [ Elm.string languageFromStringArg ]


{-| {-| Convert a `Language` to its `String` representation.
-}

languageToString: I18n.Language -> String
-}
languageToString : Elm.Expression -> Elm.Expression
languageToString languageToStringArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "languageToString"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "Language" [] ]
                        Type.string
                    )
            }
        )
        [ languageToStringArg ]


{-| {-| A list containing all `Language`s. The list is sorted alphabetically.
-}

languages: List I18n.Language
-}
languages : Elm.Expression
languages =
    Elm.value
        { importFrom = [ "I18n" ]
        , name = "languages"
        , annotation =
            Just (Type.list (Type.namedWith [ "I18n" ] "Language" []))
        }


{-| {-| Get the language currently on screen.
This might be different to the `currentLanguage` which is the language which we _like_ to have on screen.
Due to loading the translations asynchronously from a server, there will be times where these are different.
This function will equal `currentLanguage` if all pending translations have settled.
-}

arrivedLanguage: I18n.I18n -> I18n.Language
-}
arrivedLanguage : Elm.Expression -> Elm.Expression
arrivedLanguage arrivedLanguageArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "arrivedLanguage"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        (Type.namedWith [ "I18n" ] "Language" [])
                    )
            }
        )
        [ arrivedLanguageArg ]


{-| {-| Get the currently active language.
Note: This might not be what the user sees in this moment, since the translations might still be loading and instead
another language is visible. If you need the other semantic, use `arrivedLanguage` instead.
-}

currentLanguage: I18n.I18n -> I18n.Language
-}
currentLanguage : Elm.Expression -> Elm.Expression
currentLanguage currentLanguageArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "currentLanguage"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        (Type.namedWith [ "I18n" ] "Language" [])
                    )
            }
        )
        [ currentLanguageArg ]


{-| {-| Initialize an (empty) `I18n` instance. This is useful on startup when no JSON was `load`ed yet.
-}

init: { lang : I18n.Language, path : String } -> I18n.I18n
-}
init : { lang : Elm.Expression, path : String } -> Elm.Expression
init initArg =
    Elm.apply
        (Elm.value
            { importFrom = [ "I18n" ]
            , name = "init"
            , annotation =
                Just
                    (Type.function
                        [ Type.record
                            [ ( "lang"
                              , Type.namedWith [ "I18n" ] "Language" []
                              )
                            , ( "path", Type.string )
                            ]
                        ]
                        (Type.namedWith [ "I18n" ] "I18n" [])
                    )
            }
        )
        [ Elm.record
            [ Tuple.pair "lang" initArg.lang
            , Tuple.pair "path" (Elm.string initArg.path)
            ]
        ]


annotation_ : { language : Type.Annotation, i18n : Type.Annotation }
annotation_ =
    { language = Type.namedWith [ "I18n" ] "Language" []
    , i18n = Type.namedWith [ "I18n" ] "I18n" []
    }


make_ : { en : Elm.Expression, es : Elm.Expression }
make_ =
    { en =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "En"
            , annotation = Just (Type.namedWith [] "Language" [])
            }
    , es =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "Es"
            , annotation = Just (Type.namedWith [] "Language" [])
            }
    }


caseOf_ :
    { language :
        Elm.Expression
        -> { languageTags_0_0 | en : Elm.Expression, es : Elm.Expression }
        -> Elm.Expression
    }
caseOf_ =
    { language =
        \languageExpression languageTags ->
            Elm.Case.custom
                languageExpression
                (Type.namedWith [ "I18n" ] "Language" [])
                [ Elm.Case.branch0 "En" languageTags.en
                , Elm.Case.branch0 "Es" languageTags.es
                ]
    }


call_ :
    { languageToFileName_home : Elm.Expression -> Elm.Expression
    , decodeHome : Elm.Expression -> Elm.Expression
    , servicesTitle : Elm.Expression -> Elm.Expression
    , servicesSelfCatering : Elm.Expression -> Elm.Expression
    , servicesHostels : Elm.Expression -> Elm.Expression
    , servicesHalfBoard : Elm.Expression -> Elm.Expression
    , navbarServices : Elm.Expression -> Elm.Expression
    , navbarPartner : Elm.Expression -> Elm.Expression
    , navbarHost : Elm.Expression -> Elm.Expression
    , navbarAbout : Elm.Expression -> Elm.Expression
    , homeSubline : Elm.Expression -> Elm.Expression
    , homeHeadline : Elm.Expression -> Elm.Expression
    , formsTo : Elm.Expression -> Elm.Expression
    , formsSurname : Elm.Expression -> Elm.Expression
    , formsSubmitting : Elm.Expression -> Elm.Expression
    , formsSubmit : Elm.Expression -> Elm.Expression
    , formsSex : Elm.Expression -> Elm.Expression
    , formsService : Elm.Expression -> Elm.Expression
    , formsPhone : Elm.Expression -> Elm.Expression
    , formsMessage : Elm.Expression -> Elm.Expression
    , formsInstitution : Elm.Expression -> Elm.Expression
    , formsFrom : Elm.Expression -> Elm.Expression
    , formsForename : Elm.Expression -> Elm.Expression
    , formsErrorContact : Elm.Expression -> Elm.Expression
    , formsError : Elm.Expression -> Elm.Expression
    , formsEmail : Elm.Expression -> Elm.Expression
    , formsCountry : Elm.Expression -> Elm.Expression
    , formsContact : Elm.Expression -> Elm.Expression
    , formsAge : Elm.Expression -> Elm.Expression
    , footerTermsConditions : Elm.Expression -> Elm.Expression
    , footerSupport : Elm.Expression -> Elm.Expression
    , footerPrivacyPolicy : Elm.Expression -> Elm.Expression
    , footerMeeting : Elm.Expression -> Elm.Expression
    , footerLegal : Elm.Expression -> Elm.Expression
    , footerLanguage : Elm.Expression -> Elm.Expression
    , footerCopyright : Elm.Expression -> Elm.Expression
    , footerContact : Elm.Expression -> Elm.Expression
    , buttonServices : Elm.Expression -> Elm.Expression
    , buttonRequestAccommodation : Elm.Expression -> Elm.Expression
    , aboutWhoContent : Elm.Expression -> Elm.Expression
    , aboutWho : Elm.Expression -> Elm.Expression
    , aboutWhereContent : Elm.Expression -> Elm.Expression
    , aboutWhere : Elm.Expression -> Elm.Expression
    , aboutTitle : Elm.Expression -> Elm.Expression
    , aboutProductContent : Elm.Expression -> Elm.Expression
    , aboutProduct : Elm.Expression -> Elm.Expression
    , switchLanguage :
        Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression
    , loadHome : Elm.Expression -> Elm.Expression -> Elm.Expression
    , languageFromString : Elm.Expression -> Elm.Expression
    , languageToString : Elm.Expression -> Elm.Expression
    , arrivedLanguage : Elm.Expression -> Elm.Expression
    , currentLanguage : Elm.Expression -> Elm.Expression
    , init : Elm.Expression -> Elm.Expression
    }
call_ =
    { languageToFileName_home =
        \languageToFileName_homeArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "languageToFileName_home"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "Language" [] ]
                                Type.string
                            )
                    }
                )
                [ languageToFileName_homeArg ]
    , decodeHome =
        \decodeHomeArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "decodeHome"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "Language" [] ]
                                (Type.namedWith
                                    [ "Json", "Decode" ]
                                    "Decoder"
                                    [ Type.function
                                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                        (Type.namedWith [ "I18n" ] "I18n" [])
                                    ]
                                )
                            )
                    }
                )
                [ decodeHomeArg ]
    , servicesTitle =
        \servicesTitleArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "servicesTitle"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ servicesTitleArg ]
    , servicesSelfCatering =
        \servicesSelfCateringArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "servicesSelfCatering"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ servicesSelfCateringArg ]
    , servicesHostels =
        \servicesHostelsArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "servicesHostels"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ servicesHostelsArg ]
    , servicesHalfBoard =
        \servicesHalfBoardArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "servicesHalfBoard"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ servicesHalfBoardArg ]
    , navbarServices =
        \navbarServicesArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "navbarServices"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ navbarServicesArg ]
    , navbarPartner =
        \navbarPartnerArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "navbarPartner"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ navbarPartnerArg ]
    , navbarHost =
        \navbarHostArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "navbarHost"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ navbarHostArg ]
    , navbarAbout =
        \navbarAboutArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "navbarAbout"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ navbarAboutArg ]
    , homeSubline =
        \homeSublineArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "homeSubline"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ homeSublineArg ]
    , homeHeadline =
        \homeHeadlineArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "homeHeadline"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ homeHeadlineArg ]
    , formsTo =
        \formsToArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "formsTo"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ formsToArg ]
    , formsSurname =
        \formsSurnameArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "formsSurname"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ formsSurnameArg ]
    , formsSubmitting =
        \formsSubmittingArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "formsSubmitting"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ formsSubmittingArg ]
    , formsSubmit =
        \formsSubmitArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "formsSubmit"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ formsSubmitArg ]
    , formsSex =
        \formsSexArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "formsSex"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ formsSexArg ]
    , formsService =
        \formsServiceArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "formsService"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ formsServiceArg ]
    , formsPhone =
        \formsPhoneArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "formsPhone"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ formsPhoneArg ]
    , formsMessage =
        \formsMessageArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "formsMessage"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ formsMessageArg ]
    , formsInstitution =
        \formsInstitutionArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "formsInstitution"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ formsInstitutionArg ]
    , formsFrom =
        \formsFromArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "formsFrom"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ formsFromArg ]
    , formsForename =
        \formsForenameArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "formsForename"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ formsForenameArg ]
    , formsErrorContact =
        \formsErrorContactArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "formsErrorContact"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ formsErrorContactArg ]
    , formsError =
        \formsErrorArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "formsError"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ formsErrorArg ]
    , formsEmail =
        \formsEmailArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "formsEmail"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ formsEmailArg ]
    , formsCountry =
        \formsCountryArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "formsCountry"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ formsCountryArg ]
    , formsContact =
        \formsContactArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "formsContact"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ formsContactArg ]
    , formsAge =
        \formsAgeArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "formsAge"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ formsAgeArg ]
    , footerTermsConditions =
        \footerTermsConditionsArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "footerTermsConditions"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ footerTermsConditionsArg ]
    , footerSupport =
        \footerSupportArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "footerSupport"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ footerSupportArg ]
    , footerPrivacyPolicy =
        \footerPrivacyPolicyArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "footerPrivacyPolicy"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ footerPrivacyPolicyArg ]
    , footerMeeting =
        \footerMeetingArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "footerMeeting"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ footerMeetingArg ]
    , footerLegal =
        \footerLegalArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "footerLegal"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ footerLegalArg ]
    , footerLanguage =
        \footerLanguageArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "footerLanguage"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ footerLanguageArg ]
    , footerCopyright =
        \footerCopyrightArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "footerCopyright"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ footerCopyrightArg ]
    , footerContact =
        \footerContactArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "footerContact"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ footerContactArg ]
    , buttonServices =
        \buttonServicesArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "buttonServices"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ buttonServicesArg ]
    , buttonRequestAccommodation =
        \buttonRequestAccommodationArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "buttonRequestAccommodation"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ buttonRequestAccommodationArg ]
    , aboutWhoContent =
        \aboutWhoContentArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "aboutWhoContent"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ aboutWhoContentArg ]
    , aboutWho =
        \aboutWhoArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "aboutWho"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ aboutWhoArg ]
    , aboutWhereContent =
        \aboutWhereContentArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "aboutWhereContent"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ aboutWhereContentArg ]
    , aboutWhere =
        \aboutWhereArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "aboutWhere"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ aboutWhereArg ]
    , aboutTitle =
        \aboutTitleArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "aboutTitle"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ aboutTitleArg ]
    , aboutProductContent =
        \aboutProductContentArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "aboutProductContent"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ aboutProductContentArg ]
    , aboutProduct =
        \aboutProductArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "aboutProduct"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                Type.string
                            )
                    }
                )
                [ aboutProductArg ]
    , switchLanguage =
        \switchLanguageArg switchLanguageArg0 switchLanguageArg1 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "switchLanguage"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "Language" []
                                , Type.function
                                    [ Type.namedWith
                                        [ "Result" ]
                                        "Result"
                                        [ Type.namedWith [ "Http" ] "Error" []
                                        , Type.function
                                            [ Type.namedWith
                                                [ "I18n" ]
                                                "I18n"
                                                []
                                            ]
                                            (Type.namedWith [ "I18n" ] "I18n" []
                                            )
                                        ]
                                    ]
                                    (Type.var "msg")
                                , Type.namedWith [ "I18n" ] "I18n" []
                                ]
                                (Type.tuple
                                    (Type.namedWith [ "I18n" ] "I18n" [])
                                    (Type.namedWith
                                        [ "I18n" ]
                                        "Cmd"
                                        [ Type.var "msg" ]
                                    )
                                )
                            )
                    }
                )
                [ switchLanguageArg, switchLanguageArg0, switchLanguageArg1 ]
    , loadHome =
        \loadHomeArg loadHomeArg0 ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "loadHome"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.function
                                    [ Type.namedWith
                                        [ "Result" ]
                                        "Result"
                                        [ Type.namedWith [ "Http" ] "Error" []
                                        , Type.function
                                            [ Type.namedWith
                                                [ "I18n" ]
                                                "I18n"
                                                []
                                            ]
                                            (Type.namedWith [ "I18n" ] "I18n" []
                                            )
                                        ]
                                    ]
                                    (Type.var "msg")
                                , Type.namedWith [ "I18n" ] "I18n" []
                                ]
                                (Type.namedWith
                                    [ "I18n" ]
                                    "Cmd"
                                    [ Type.var "msg" ]
                                )
                            )
                    }
                )
                [ loadHomeArg, loadHomeArg0 ]
    , languageFromString =
        \languageFromStringArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "languageFromString"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.string ]
                                (Type.maybe
                                    (Type.namedWith [ "I18n" ] "Language" [])
                                )
                            )
                    }
                )
                [ languageFromStringArg ]
    , languageToString =
        \languageToStringArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "languageToString"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "Language" [] ]
                                Type.string
                            )
                    }
                )
                [ languageToStringArg ]
    , arrivedLanguage =
        \arrivedLanguageArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "arrivedLanguage"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                (Type.namedWith [ "I18n" ] "Language" [])
                            )
                    }
                )
                [ arrivedLanguageArg ]
    , currentLanguage =
        \currentLanguageArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "currentLanguage"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                (Type.namedWith [ "I18n" ] "Language" [])
                            )
                    }
                )
                [ currentLanguageArg ]
    , init =
        \initArg ->
            Elm.apply
                (Elm.value
                    { importFrom = [ "I18n" ]
                    , name = "init"
                    , annotation =
                        Just
                            (Type.function
                                [ Type.record
                                    [ ( "lang"
                                      , Type.namedWith [ "I18n" ] "Language" []
                                      )
                                    , ( "path", Type.string )
                                    ]
                                ]
                                (Type.namedWith [ "I18n" ] "I18n" [])
                            )
                    }
                )
                [ initArg ]
    }


values_ :
    { languageToFileName_home : Elm.Expression
    , decodeHome : Elm.Expression
    , servicesTitle : Elm.Expression
    , servicesSelfCatering : Elm.Expression
    , servicesHostels : Elm.Expression
    , servicesHalfBoard : Elm.Expression
    , navbarServices : Elm.Expression
    , navbarPartner : Elm.Expression
    , navbarHost : Elm.Expression
    , navbarAbout : Elm.Expression
    , homeSubline : Elm.Expression
    , homeHeadline : Elm.Expression
    , formsTo : Elm.Expression
    , formsSurname : Elm.Expression
    , formsSubmitting : Elm.Expression
    , formsSubmit : Elm.Expression
    , formsSex : Elm.Expression
    , formsService : Elm.Expression
    , formsPhone : Elm.Expression
    , formsMessage : Elm.Expression
    , formsInstitution : Elm.Expression
    , formsFrom : Elm.Expression
    , formsForename : Elm.Expression
    , formsErrorContact : Elm.Expression
    , formsError : Elm.Expression
    , formsEmail : Elm.Expression
    , formsCountry : Elm.Expression
    , formsContact : Elm.Expression
    , formsAge : Elm.Expression
    , footerTermsConditions : Elm.Expression
    , footerSupport : Elm.Expression
    , footerPrivacyPolicy : Elm.Expression
    , footerMeeting : Elm.Expression
    , footerLegal : Elm.Expression
    , footerLanguage : Elm.Expression
    , footerCopyright : Elm.Expression
    , footerContact : Elm.Expression
    , buttonServices : Elm.Expression
    , buttonRequestAccommodation : Elm.Expression
    , aboutWhoContent : Elm.Expression
    , aboutWho : Elm.Expression
    , aboutWhereContent : Elm.Expression
    , aboutWhere : Elm.Expression
    , aboutTitle : Elm.Expression
    , aboutProductContent : Elm.Expression
    , aboutProduct : Elm.Expression
    , switchLanguage : Elm.Expression
    , loadHome : Elm.Expression
    , languageFromString : Elm.Expression
    , languageToString : Elm.Expression
    , languages : Elm.Expression
    , arrivedLanguage : Elm.Expression
    , currentLanguage : Elm.Expression
    , init : Elm.Expression
    }
values_ =
    { languageToFileName_home =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "languageToFileName_home"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "Language" [] ]
                        Type.string
                    )
            }
    , decodeHome =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "decodeHome"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "Language" [] ]
                        (Type.namedWith
                            [ "Json", "Decode" ]
                            "Decoder"
                            [ Type.function
                                [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                (Type.namedWith [ "I18n" ] "I18n" [])
                            ]
                        )
                    )
            }
    , servicesTitle =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "servicesTitle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , servicesSelfCatering =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "servicesSelfCatering"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , servicesHostels =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "servicesHostels"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , servicesHalfBoard =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "servicesHalfBoard"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , navbarServices =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "navbarServices"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , navbarPartner =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "navbarPartner"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , navbarHost =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "navbarHost"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , navbarAbout =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "navbarAbout"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , homeSubline =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "homeSubline"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , homeHeadline =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "homeHeadline"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , formsTo =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsTo"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , formsSurname =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsSurname"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , formsSubmitting =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsSubmitting"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , formsSubmit =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsSubmit"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , formsSex =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsSex"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , formsService =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsService"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , formsPhone =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsPhone"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , formsMessage =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsMessage"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , formsInstitution =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsInstitution"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , formsFrom =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsFrom"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , formsForename =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsForename"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , formsErrorContact =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsErrorContact"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , formsError =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsError"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , formsEmail =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsEmail"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , formsCountry =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsCountry"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , formsContact =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsContact"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , formsAge =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "formsAge"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , footerTermsConditions =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "footerTermsConditions"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , footerSupport =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "footerSupport"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , footerPrivacyPolicy =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "footerPrivacyPolicy"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , footerMeeting =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "footerMeeting"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , footerLegal =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "footerLegal"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , footerLanguage =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "footerLanguage"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , footerCopyright =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "footerCopyright"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , footerContact =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "footerContact"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , buttonServices =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "buttonServices"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , buttonRequestAccommodation =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "buttonRequestAccommodation"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , aboutWhoContent =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "aboutWhoContent"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , aboutWho =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "aboutWho"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , aboutWhereContent =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "aboutWhereContent"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , aboutWhere =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "aboutWhere"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , aboutTitle =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "aboutTitle"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , aboutProductContent =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "aboutProductContent"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , aboutProduct =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "aboutProduct"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        Type.string
                    )
            }
    , switchLanguage =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "switchLanguage"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "Language" []
                        , Type.function
                            [ Type.namedWith
                                [ "Result" ]
                                "Result"
                                [ Type.namedWith [ "Http" ] "Error" []
                                , Type.function
                                    [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                    (Type.namedWith [ "I18n" ] "I18n" [])
                                ]
                            ]
                            (Type.var "msg")
                        , Type.namedWith [ "I18n" ] "I18n" []
                        ]
                        (Type.tuple
                            (Type.namedWith [ "I18n" ] "I18n" [])
                            (Type.namedWith [ "I18n" ] "Cmd" [ Type.var "msg" ])
                        )
                    )
            }
    , loadHome =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "loadHome"
            , annotation =
                Just
                    (Type.function
                        [ Type.function
                            [ Type.namedWith
                                [ "Result" ]
                                "Result"
                                [ Type.namedWith [ "Http" ] "Error" []
                                , Type.function
                                    [ Type.namedWith [ "I18n" ] "I18n" [] ]
                                    (Type.namedWith [ "I18n" ] "I18n" [])
                                ]
                            ]
                            (Type.var "msg")
                        , Type.namedWith [ "I18n" ] "I18n" []
                        ]
                        (Type.namedWith [ "I18n" ] "Cmd" [ Type.var "msg" ])
                    )
            }
    , languageFromString =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "languageFromString"
            , annotation =
                Just
                    (Type.function
                        [ Type.string ]
                        (Type.maybe (Type.namedWith [ "I18n" ] "Language" []))
                    )
            }
    , languageToString =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "languageToString"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "Language" [] ]
                        Type.string
                    )
            }
    , languages =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "languages"
            , annotation =
                Just (Type.list (Type.namedWith [ "I18n" ] "Language" []))
            }
    , arrivedLanguage =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "arrivedLanguage"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        (Type.namedWith [ "I18n" ] "Language" [])
                    )
            }
    , currentLanguage =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "currentLanguage"
            , annotation =
                Just
                    (Type.function
                        [ Type.namedWith [ "I18n" ] "I18n" [] ]
                        (Type.namedWith [ "I18n" ] "Language" [])
                    )
            }
    , init =
        Elm.value
            { importFrom = [ "I18n" ]
            , name = "init"
            , annotation =
                Just
                    (Type.function
                        [ Type.record
                            [ ( "lang"
                              , Type.namedWith [ "I18n" ] "Language" []
                              )
                            , ( "path", Type.string )
                            ]
                        ]
                        (Type.namedWith [ "I18n" ] "I18n" [])
                    )
            }
    }